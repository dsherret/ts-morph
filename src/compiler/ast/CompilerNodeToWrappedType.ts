// DO NOT EDIT - Automatically maintained by createCompilerNodeToWrappedType.ts
import * as compiler from "./index";
import { ts } from "../../typescript";

export type CompilerNodeToWrappedType<T extends ts.Node> = T extends ts.ArrayBindingPattern ? compiler.ArrayBindingPattern :
    T extends ts.BindingElement ? compiler.BindingElement :
    T extends ts.ObjectBindingPattern ? compiler.ObjectBindingPattern :
    T extends ts.ClassDeclaration ? compiler.ClassDeclaration :
    T extends ts.ClassExpression ? compiler.ClassExpression :
    T extends ts.ConstructorDeclaration ? compiler.ConstructorDeclaration :
    T extends ts.GetAccessorDeclaration ? compiler.GetAccessorDeclaration :
    T extends ts.MethodDeclaration ? compiler.MethodDeclaration :
    T extends ts.PropertyDeclaration ? compiler.PropertyDeclaration :
    T extends ts.SetAccessorDeclaration ? compiler.SetAccessorDeclaration :
    T extends ts.ComputedPropertyName ? compiler.ComputedPropertyName :
    T extends ts.Identifier ? compiler.Identifier :
    T extends ts.QualifiedName ? compiler.QualifiedName :
    T extends ts.SyntaxList ? compiler.SyntaxList :
    T extends ts.Decorator ? compiler.Decorator :
    T extends ts.JSDoc ? compiler.JSDoc :
    T extends ts.JSDocAugmentsTag ? compiler.JSDocAugmentsTag :
    T extends ts.JSDocClassTag ? compiler.JSDocClassTag :
    T extends ts.JSDocParameterTag ? compiler.JSDocParameterTag :
    T extends ts.JSDocPropertyTag ? compiler.JSDocPropertyTag :
    T extends ts.JSDocReturnTag ? compiler.JSDocReturnTag :
    T extends ts.JSDocTypedefTag ? compiler.JSDocTypedefTag :
    T extends ts.JSDocTypeTag ? compiler.JSDocTypeTag :
    T extends ts.JSDocUnknownTag ? compiler.JSDocUnknownTag :
    T extends ts.JSDocTag ? compiler.JSDocTag :
    T extends ts.EnumDeclaration ? compiler.EnumDeclaration :
    T extends ts.EnumMember ? compiler.EnumMember :
    T extends ts.AsExpression ? compiler.AsExpression :
    T extends ts.AwaitExpression ? compiler.AwaitExpression :
    T extends ts.CallExpression ? compiler.CallExpression :
    T extends ts.CommaListExpression ? compiler.CommaListExpression :
    T extends ts.ConditionalExpression ? compiler.ConditionalExpression :
    T extends ts.DeleteExpression ? compiler.DeleteExpression :
    T extends ts.ImportExpression ? compiler.ImportExpression :
    T extends ts.MetaProperty ? compiler.MetaProperty :
    T extends ts.NewExpression ? compiler.NewExpression :
    T extends ts.NonNullExpression ? compiler.NonNullExpression :
    T extends ts.OmittedExpression ? compiler.OmittedExpression :
    T extends ts.ParenthesizedExpression ? compiler.ParenthesizedExpression :
    T extends ts.PartiallyEmittedExpression ? compiler.PartiallyEmittedExpression :
    T extends ts.PostfixUnaryExpression ? compiler.PostfixUnaryExpression :
    T extends ts.PrefixUnaryExpression ? compiler.PrefixUnaryExpression :
    T extends ts.SpreadElement ? compiler.SpreadElement :
    T extends ts.SuperElementAccessExpression ? compiler.SuperElementAccessExpression :
    T extends ts.ElementAccessExpression ? compiler.ElementAccessExpression :
    T extends ts.SuperExpression ? compiler.SuperExpression :
    T extends ts.SuperPropertyAccessExpression ? compiler.SuperPropertyAccessExpression :
    T extends ts.PropertyAccessExpression ? compiler.PropertyAccessExpression :
    T extends ts.ThisExpression ? compiler.ThisExpression :
    T extends ts.TypeAssertion ? compiler.TypeAssertion :
    T extends ts.TypeOfExpression ? compiler.TypeOfExpression :
    T extends ts.VoidExpression ? compiler.VoidExpression :
    T extends ts.YieldExpression ? compiler.YieldExpression :
    T extends ts.ArrowFunction ? compiler.ArrowFunction :
    T extends ts.FunctionDeclaration ? compiler.FunctionDeclaration :
    T extends ts.FunctionExpression ? compiler.FunctionExpression :
    T extends ts.ParameterDeclaration ? compiler.ParameterDeclaration :
    T extends ts.HeritageClause ? compiler.HeritageClause :
    T extends ts.CallSignatureDeclaration ? compiler.CallSignatureDeclaration :
    T extends ts.ConstructSignatureDeclaration ? compiler.ConstructSignatureDeclaration :
    T extends ts.IndexSignatureDeclaration ? compiler.IndexSignatureDeclaration :
    T extends ts.InterfaceDeclaration ? compiler.InterfaceDeclaration :
    T extends ts.MethodSignature ? compiler.MethodSignature :
    T extends ts.PropertySignature ? compiler.PropertySignature :
    T extends ts.TypeElement ? compiler.TypeElement :
    T extends ts.JsxAttribute ? compiler.JsxAttribute :
    T extends ts.JsxClosingElement ? compiler.JsxClosingElement :
    T extends ts.JsxClosingFragment ? compiler.JsxClosingFragment :
    T extends ts.JsxElement ? compiler.JsxElement :
    T extends ts.JsxExpression ? compiler.JsxExpression :
    T extends ts.JsxFragment ? compiler.JsxFragment :
    T extends ts.JsxOpeningElement ? compiler.JsxOpeningElement :
    T extends ts.JsxOpeningFragment ? compiler.JsxOpeningFragment :
    T extends ts.JsxSelfClosingElement ? compiler.JsxSelfClosingElement :
    T extends ts.JsxSpreadAttribute ? compiler.JsxSpreadAttribute :
    T extends ts.JsxText ? compiler.JsxText :
    T extends ts.BooleanLiteral ? compiler.BooleanLiteral :
    T extends ts.NullLiteral ? compiler.NullLiteral :
    T extends ts.NumericLiteral ? compiler.NumericLiteral :
    T extends ts.RegularExpressionLiteral ? compiler.RegularExpressionLiteral :
    T extends ts.StringLiteral ? compiler.StringLiteral :
    T extends ts.ExportAssignment ? compiler.ExportAssignment :
    T extends ts.ExportDeclaration ? compiler.ExportDeclaration :
    T extends ts.ExportSpecifier ? compiler.ExportSpecifier :
    T extends ts.ExternalModuleReference ? compiler.ExternalModuleReference :
    T extends ts.ImportClause ? compiler.ImportClause :
    T extends ts.ImportDeclaration ? compiler.ImportDeclaration :
    T extends ts.ImportEqualsDeclaration ? compiler.ImportEqualsDeclaration :
    T extends ts.ImportSpecifier ? compiler.ImportSpecifier :
    T extends ts.NamespaceDeclaration ? compiler.NamespaceDeclaration :
    T extends ts.NamespaceImport ? compiler.NamespaceImport :
    T extends ts.SourceFile ? compiler.SourceFile :
    T extends ts.Block ? compiler.Block :
    T extends ts.BreakStatement ? compiler.BreakStatement :
    T extends ts.CaseBlock ? compiler.CaseBlock :
    T extends ts.CaseClause ? compiler.CaseClause :
    T extends ts.CatchClause ? compiler.CatchClause :
    T extends ts.ContinueStatement ? compiler.ContinueStatement :
    T extends ts.DebuggerStatement ? compiler.DebuggerStatement :
    T extends ts.DefaultClause ? compiler.DefaultClause :
    T extends ts.DoStatement ? compiler.DoStatement :
    T extends ts.EmptyStatement ? compiler.EmptyStatement :
    T extends ts.ExpressionStatement ? compiler.ExpressionStatement :
    T extends ts.ForInStatement ? compiler.ForInStatement :
    T extends ts.ForOfStatement ? compiler.ForOfStatement :
    T extends ts.ForStatement ? compiler.ForStatement :
    T extends ts.IfStatement ? compiler.IfStatement :
    T extends ts.LabeledStatement ? compiler.LabeledStatement :
    T extends ts.NotEmittedStatement ? compiler.NotEmittedStatement :
    T extends ts.ReturnStatement ? compiler.ReturnStatement :
    T extends ts.SwitchStatement ? compiler.SwitchStatement :
    T extends ts.ThrowStatement ? compiler.ThrowStatement :
    T extends ts.TryStatement ? compiler.TryStatement :
    T extends ts.VariableStatement ? compiler.VariableStatement :
    T extends ts.WhileStatement ? compiler.WhileStatement :
    T extends ts.IterationStatement ? compiler.IterationStatement :
    T extends ts.WithStatement ? compiler.WithStatement :
    T extends ts.ArrayTypeNode ? compiler.ArrayTypeNode :
    T extends ts.ConstructorTypeNode ? compiler.ConstructorTypeNode :
    T extends ts.ExpressionWithTypeArguments ? compiler.ExpressionWithTypeArguments :
    T extends ts.FunctionTypeNode ? compiler.FunctionTypeNode :
    T extends ts.ImportTypeNode ? compiler.ImportTypeNode :
    T extends ts.IntersectionTypeNode ? compiler.IntersectionTypeNode :
    T extends ts.LiteralTypeNode ? compiler.LiteralTypeNode :
    T extends ts.ParenthesizedTypeNode ? compiler.ParenthesizedTypeNode :
    T extends ts.TupleTypeNode ? compiler.TupleTypeNode :
    T extends ts.TypeAliasDeclaration ? compiler.TypeAliasDeclaration :
    T extends ts.Statement ? compiler.Statement :
    T extends ts.TypeLiteralNode ? compiler.TypeLiteralNode :
    T extends ts.TypeParameterDeclaration ? compiler.TypeParameterDeclaration :
    T extends ts.TypeReferenceNode ? compiler.TypeReferenceNode :
    T extends ts.UnionTypeNode ? compiler.UnionTypeNode :
    T extends ts.TypeNode ? compiler.TypeNode :
    T extends ts.VariableDeclaration ? compiler.VariableDeclaration :
    T extends ts.VariableDeclarationList ? compiler.VariableDeclarationList :
    T extends ts.ArrayDestructuringAssignment ? compiler.ArrayDestructuringAssignment :
    T extends ts.ArrayLiteralExpression ? compiler.ArrayLiteralExpression :
    T extends ts.ObjectDestructuringAssignment ? compiler.ObjectDestructuringAssignment :
    T extends ts.AssignmentExpression<any> ? compiler.AssignmentExpression :
    T extends ts.BinaryExpression ? compiler.BinaryExpression :
    T extends ts.ObjectLiteralExpression ? compiler.ObjectLiteralExpression :
    T extends ts.PropertyAssignment ? compiler.PropertyAssignment :
    T extends ts.ShorthandPropertyAssignment ? compiler.ShorthandPropertyAssignment :
    T extends ts.SpreadAssignment ? compiler.SpreadAssignment :
    T extends ts.NoSubstitutionTemplateLiteral ? compiler.NoSubstitutionTemplateLiteral :
    T extends ts.LiteralExpression ? compiler.LiteralExpression :
    T extends ts.TaggedTemplateExpression ? compiler.TaggedTemplateExpression :
    T extends ts.TemplateExpression ? compiler.TemplateExpression :
    T extends ts.PrimaryExpression ? compiler.PrimaryExpression :
    T extends ts.MemberExpression ? compiler.MemberExpression :
    T extends ts.LeftHandSideExpression ? compiler.LeftHandSideExpression :
    T extends ts.UpdateExpression ? compiler.UpdateExpression :
    T extends ts.UnaryExpression ? compiler.UnaryExpression :
    T extends ts.Expression ? compiler.Expression :
    T extends ts.TemplateHead ? compiler.TemplateHead :
    T extends ts.TemplateMiddle ? compiler.TemplateMiddle :
    T extends ts.TemplateSpan ? compiler.TemplateSpan :
    T extends ts.TemplateTail ? compiler.TemplateTail : compiler.Node<T>;
